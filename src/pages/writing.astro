---
import BaseLayout from '../layouts/BaseLayout.astro';
import LastUpdated from '../components/LastUpdated.astro';
import { getCollection } from 'astro:content';
import { getCachedMediumData, type MediumArticle } from '../lib/medium.ts';

// Get static posts from content collection
const posts = await getCollection('writing');
const sortedPosts = posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Fetch Medium articles at build time
console.log('üìÑ Building writing page...');
const mediumUsername = 'andrewginns'; // Replace with your Medium username
const { articles: mediumArticles } = await getCachedMediumData(mediumUsername);

// Transform Medium articles to match the expected format
interface PostData {
  title: string;
  description: string;
  url?: string;
  date: Date;
  tags?: string[];
  slug?: string;
  isMedium: boolean;
}

const mediumPosts: PostData[] = mediumArticles.map((article: MediumArticle) => ({
  title: article.title,
  description: article.description,
  url: article.url,
  date: new Date(article.publishedAt),
  tags: article.tags,
  isMedium: true,
}));

// Combine and sort all posts
const allPosts: PostData[] = [
  ...sortedPosts.map((post) => ({
    title: post.data.title,
    description: post.data.description,
    date: post.data.date,
    tags: post.data.tags,
    slug: post.slug,
    isMedium: false,
    url: undefined,
  })),
  ...mediumPosts,
].sort((a, b) => b.date.getTime() - a.date.getTime());

if (mediumArticles.length > 0) {
  console.log(
    `‚úÖ Writing page: Using ${mediumArticles.length} Medium articles + ${posts.length} static posts`
  );
} else {
  console.log(
    `‚ö†Ô∏è  Writing page: No Medium articles found, using ${posts.length} static posts only`
  );
}
---

<BaseLayout title="Writing - Andrew Ginns">
  <div class="writing-content">
    <h1>Writing</h1>
    <p class="intro">
      {
        mediumArticles.length > 0
          ? 'Thoughts on machine learning, MLOps, and building AI systems at scale. I write about practical experiences, technical deep-dives, and industry trends. Articles are automatically synced from my Medium publications.'
          : 'Thoughts on machine learning, MLOps, and building AI systems at scale. I write about practical experiences, technical deep-dives, and industry trends.'
      }
    </p>

    {
      allPosts.length === 0 ? (
        <div class="no-posts">
          <p>Blog posts coming soon. Stay tuned for insights on:</p>
          <ul>
            <li>Building production-grade ML pipelines</li>
            <li>Scaling Data Science teams effectively</li>
            <li>MLOps best practices and lessons learned</li>
            <li>Deep dives into LLMs and generative AI</li>
            <li>Case studies from real-world projects</li>
          </ul>
        </div>
      ) : (
        <div class="posts-list">
          {allPosts.map((post) => (
            <article class="post-preview">
              {post.isMedium && (
                <a
                  href={post.url}
                  class="medium-icon"
                  target="_blank"
                  rel="noopener noreferrer"
                  aria-label={`Read ${post.title} on Medium`}
                  title="Read on Medium"
                >
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M13.54 12a6.8 6.8 0 01-6.77 6.82A6.8 6.8 0 010 12a6.8 6.8 0 016.77-6.82A6.8 6.8 0 0113.54 12zM20.96 12c0 3.54-1.51 6.42-3.38 6.42-1.87 0-3.39-2.88-3.39-6.42s1.52-6.42 3.39-6.42 3.38 2.88 3.38 6.42M24 12c0 3.17-.53 5.75-1.19 5.75-.66 0-1.19-2.58-1.19-5.75s.53-5.75 1.19-5.75C23.47 6.25 24 8.83 24 12z"
                      fill="currentColor"
                    />
                  </svg>
                </a>
              )}
              <h2>
                {post.isMedium ? (
                  <a href={post.url} target="_blank" rel="noopener noreferrer">
                    {post.title}
                  </a>
                ) : (
                  <a href={`/writing/${post.slug}`}>{post.title}</a>
                )}
              </h2>
              <div class="post-meta">
                <time datetime={post.date.toISOString()}>
                  {post.date.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </time>
                {post.tags && post.tags.length > 0 && (
                  <div class="tags">
                    {post.tags.map((tag) => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
                {post.isMedium && <span class="medium-badge">Medium</span>}
              </div>
              <p>{post.description}</p>
            </article>
          ))}
        </div>
      )
    }

    <LastUpdated />
  </div>
</BaseLayout>

<style>
  .writing-content {
    max-width: 700px;
  }

  .intro {
    font-size: 1.1rem;
    line-height: 1.8;
    margin-bottom: 3rem;
    color: var(--text-secondary);
  }

  .no-posts {
    padding: 2rem;
    background: var(--bg-secondary);
    border-radius: 8px;
  }

  .no-posts ul {
    margin-top: 1rem;
    margin-left: 1.5rem;
  }

  .no-posts li {
    margin-bottom: 0.5rem;
  }

  .posts-list {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .post-preview {
    padding-bottom: 2rem;
    border-bottom: 1px solid #eee;
  }

  .post-preview:last-child {
    border-bottom: none;
  }

  .post-preview h2 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .post-preview h2 a {
    color: var(--text-primary);
    text-decoration: none;
  }

  .post-preview h2 a:hover {
    color: var(--accent);
  }

  .post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }

  .tag {
    padding: 0.2rem 0.6rem;
    background: var(--bg-secondary);
    border-radius: 4px;
    font-size: 0.85rem;
  }

  .medium-icon {
    display: none;
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 32px;
    height: 32px;
    padding: 4px;
    color: var(--text-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--bg-primary);
    transition: all 0.3s ease;
    z-index: 10;
  }

  .medium-icon:hover {
    color: #00ab6c;
    border-color: #00ab6c;
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0, 171, 108, 0.2);
  }

  .medium-icon svg {
    width: 100%;
    height: 100%;
  }

  .medium-badge {
    padding: 0.2rem 0.6rem;
    background: #00ab6c;
    color: white;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .post-preview {
    position: relative;
    padding-bottom: 2rem;
    border-bottom: 1px solid #eee;
  }

  /* Show Medium icon on mobile when hamburger menu is visible */
  @media (max-width: 1024px) {
    .medium-icon {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .post-preview h2 {
      padding-right: 3rem; /* Ensure title doesn't overlap with Medium icon */
    }
  }
</style>
