---
export interface Props {
  difficulties: string[];
  providers: string[];
}

const { difficulties, providers } = Astro.props;
---

<div class="filter-container" id="filter-container">
  <div class="backdrop"></div>
  <div class="backdrop-edge"></div>
  <div class="filter-inner">
    <div class="filter-row">
      <!-- Difficulty Filter Group -->
      <div class="filter-group">
        <span class="filter-label">Difficulty:</span>
        <div class="filter-controls">
          {
            difficulties.map((difficulty) => (
              <label class="filter-checkbox">
                <input
                  type="checkbox"
                  name="difficulty"
                  value={difficulty}
                  checked
                  data-difficulty={difficulty}
                />
                <span class="checkbox-label">
                  {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
                </span>
              </label>
            ))
          }
        </div>
      </div>

      <!-- Provider Filter Group -->
      <div class="filter-group">
        <span class="filter-label">Provider:</span>
        <div class="filter-controls">
          {
            providers.map((provider) => (
              <label class="filter-checkbox">
                <input
                  type="checkbox"
                  name="provider"
                  value={provider}
                  checked
                  data-provider={provider}
                />
                <span class="checkbox-label">{provider}</span>
              </label>
            ))
          }
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="filter-actions">
        <button class="filter-action" id="select-all">All</button>
        <button class="filter-action" id="clear-all">None</button>
      </div>
    </div>
  </div>
</div>

<style is:global>
  /* Sticky filter container with glass effect */
  .filter-container {
    --glass-thickness: 3px;
    position: sticky;
    top: 1rem;
    z-index: 100;
    border-radius: 8px;
    margin: 0 0 1.5rem;
    transition: all 0.3s ease;
    overflow: hidden;

    /* Very opaque fallback for unsupported browsers */
    background: color-mix(in srgb, var(--bg-secondary) 95%, transparent);
    border: 1px solid var(--border-color);
  }

  /* Progressive enhancement: Glass effect for browsers with backdrop-filter support */
  @supports (backdrop-filter: blur(16px)) or (-webkit-backdrop-filter: blur(16px)) {
    .filter-container {
      background: color-mix(in srgb, var(--bg-secondary) 50%, transparent);
      border: 1px solid color-mix(in srgb, var(--border-color) 30%, transparent);
    }

    .backdrop {
      position: absolute;
      inset: 0;
      -webkit-backdrop-filter: blur(16px);
      backdrop-filter: blur(16px);
      background: linear-gradient(
        to bottom,
        color-mix(in srgb, var(--bg-secondary) 30%, transparent),
        transparent 50%
      );
      pointer-events: none;
    }

    .backdrop-edge {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: var(--glass-thickness);
      background: color-mix(in srgb, var(--bg-secondary) 10%, transparent);
      -webkit-backdrop-filter: blur(12px) brightness(0.96);
      backdrop-filter: blur(12px) brightness(0.96);
      transform: translateY(100%);
      pointer-events: none;
    }
  }

  /* Performance optimization: mask-image for supported browsers */
  @supports (mask-image: none) or (-webkit-mask-image: none) {
    .backdrop {
      height: 200%;
      -webkit-mask-image: linear-gradient(to bottom, black 0% 50%, transparent 50% 100%);
      mask-image: linear-gradient(to bottom, black 0% 50%, transparent 50% 100%);
    }

    .backdrop-edge {
      height: 100%;
      inset: 0;
      -webkit-mask-image: linear-gradient(
        to bottom,
        black 0,
        black var(--glass-thickness),
        transparent var(--glass-thickness)
      );
      mask-image: linear-gradient(
        to bottom,
        black 0,
        black var(--glass-thickness),
        transparent var(--glass-thickness)
      );
    }
  }

  /* Enhanced shadow when sticky */
  .filter-container.is-sticky {
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
  }

  .filter-inner {
    position: relative;
    padding: 0.75rem 1.5rem;
    z-index: 1;
  }

  .filter-row {
    display: flex;
    gap: 2rem;
    align-items: center;
    flex-wrap: wrap;
  }

  .filter-group {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .filter-label {
    font-size: 0.85rem;
    color: var(--text-secondary);
    font-weight: 600;
    white-space: nowrap;
  }

  .filter-controls {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    align-items: center;
  }

  .filter-checkbox {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    cursor: pointer;
    user-select: none;
  }

  .filter-checkbox input[type='checkbox'] {
    width: 14px;
    height: 14px;
    cursor: pointer;
    accent-color: var(--accent-primary);
    margin: 0;
  }

  .checkbox-label {
    font-size: 0.85rem;
    color: var(--text-primary);
    line-height: 1;
  }

  .filter-checkbox:hover .checkbox-label {
    color: var(--accent-primary);
  }

  .filter-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: auto;
  }

  .filter-action {
    background: var(--bg-secondary);
    color: var(--accent-primary);
    border: 1px solid var(--border-color);
    padding: 0.25rem 0.6rem;
    border-radius: 4px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
    line-height: 1;
  }

  .filter-action:hover {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
  }

  /* Mobile responsiveness - ultra compact layout below 768px */
  @media (max-width: 768px) {
    .filter-container {
      top: 0.5rem;
      margin: 0 0 0.75rem;
      border-radius: 8px;
    }

    .filter-container.is-sticky {
      margin: 0 0.5rem 0.75rem;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
    }

    .filter-inner {
      padding: 0.4rem 0.5rem;
      position: relative;
    }

    .filter-row {
      gap: 1rem;
      align-items: center;
      padding-right: 4.5rem; /* Make room for action buttons */
    }

    .filter-group {
      flex: 1 1 auto;
      gap: 0.3rem;
      flex-direction: row;
      align-items: center;
    }

    .filter-label {
      font-size: 0.7rem;
      min-width: auto;
      color: var(--text-secondary);
      margin-bottom: 0;
      font-weight: 500;
    }

    /* Abbreviate labels on very small screens */
    @media (max-width: 380px) {
      .filter-label {
        font-size: 0.65rem;
      }

      .filter-group:first-child .filter-label::after {
        content: ':';
      }

      .filter-group:first-child .filter-label {
        width: 30px;
        overflow: hidden;
      }

      .filter-group:last-of-type .filter-label {
        width: 35px;
        overflow: hidden;
      }
    }

    .filter-controls {
      gap: 0.3rem;
      width: auto;
      flex-wrap: nowrap;
    }

    .filter-checkbox {
      gap: 0.15rem;
      white-space: nowrap;
    }

    .filter-checkbox input[type='checkbox'] {
      width: 12px;
      height: 12px;
      flex-shrink: 0;
    }

    .checkbox-label {
      font-size: 0.7rem;
    }

    .filter-actions {
      position: absolute;
      top: 50%;
      right: 0.5rem;
      transform: translateY(-50%);
      gap: 0.2rem;
      margin: 0;
    }

    .filter-action {
      font-size: 0.6rem;
      padding: 0.15rem 0.35rem;
      border-radius: 3px;
      line-height: 1;
    }
  }

  /* Restore normal spacing for tablets */
  @media (min-width: 771px) and (max-width: 1024px) {
    .filter-inner {
      padding: 0.6rem 1.25rem;
    }

    .filter-row {
      gap: 1.5rem;
    }
  }

  /* Wide screens */
  @media (min-width: 1440px) {
    .filter-inner {
      max-width: calc(100% - 3rem);
    }
  }
</style>

<script>
  // Add sticky class when scrolled
  const filterContainer = document.getElementById('filter-container');
  if (filterContainer) {
    const observer = new IntersectionObserver(
      ([e]) => {
        filterContainer.classList.toggle('is-sticky', e.intersectionRatio < 1);
      },
      { threshold: [1], rootMargin: '-1px 0px 0px 0px' }
    );
    observer.observe(filterContainer);
  }

  // Handle select all / clear all buttons
  const selectAllBtn = document.getElementById('select-all');
  const clearAllBtn = document.getElementById('clear-all');

  if (selectAllBtn) {
    selectAllBtn.addEventListener('click', () => {
      const checkboxes = document.querySelectorAll('.filter-container input[type="checkbox"]');
      checkboxes.forEach((cb) => {
        (cb as HTMLInputElement).checked = true;
      });

      // Trigger change event on one checkbox to update charts
      if (checkboxes.length > 0) {
        checkboxes[0].dispatchEvent(new Event('change', { bubbles: true }));
      }
    });
  }

  if (clearAllBtn) {
    clearAllBtn.addEventListener('click', () => {
      const checkboxes = document.querySelectorAll('.filter-container input[type="checkbox"]');
      checkboxes.forEach((cb) => {
        (cb as HTMLInputElement).checked = false;
      });

      // Trigger change event on one checkbox to update charts
      if (checkboxes.length > 0) {
        checkboxes[0].dispatchEvent(new Event('change', { bubbles: true }));
      }
    });
  }
</script>
