---
import { calculateCost } from '../../lib/merbench';
import type { LeaderboardEntry } from '../../lib/merbench-types';

export interface Props {
  leaderboard: LeaderboardEntry[];
}

const { leaderboard } = Astro.props;

// Calculate cost range for progress bar normalization
const costs = leaderboard.map((entry) => entry.Avg_Cost || calculateCost(entry.Avg_Tokens));
const minCost = Math.min(...costs);
const maxCost = Math.max(...costs);
const costRange = maxCost - minCost;
---

<section class="leaderboard-section">
  <h2>Model Leaderboard</h2>
  <div class="leaderboard-table">
    <table id="leaderboard-table">
      <thead>
        <tr>
          <th>Rank</th>
          <th class="sortable" data-sort-key="Model" data-sort-type="string">
            Model <span class="sort-indicator"></span>
          </th>
          <th
            class="sortable active"
            data-sort-key="Success_Rate"
            data-sort-type="number"
            data-sort-direction="desc"
          >
            Success Rate <span class="sort-indicator">â†“</span>
          </th>
          <th class="sortable" data-sort-key="Avg_Cost" data-sort-type="number">
            Avg Cost/Run <span class="sort-indicator"></span>
          </th>
          <th class="sortable" data-sort-key="Price_per_Success" data-sort-type="number">
            Price/Success <span class="sort-indicator"></span>
          </th>
          <th class="sortable" data-sort-key="Avg_Duration" data-sort-type="number">
            Avg Duration <span class="sort-indicator"></span>
          </th>
          <th class="sortable" data-sort-key="Avg_Tokens" data-sort-type="number">
            Avg Tokens <span class="sort-indicator"></span>
          </th>
          <th class="sortable" data-sort-key="Runs" data-sort-type="number">
            Runs <span class="sort-indicator"></span>
          </th>
          <th class="sortable" data-sort-key="Provider" data-sort-type="string">
            Provider <span class="sort-indicator"></span>
          </th>
        </tr>
      </thead>
      <tbody>
        {
          leaderboard.map((entry, index) => (
            <tr>
              <td class="rank">{index + 1}</td>
              <td class="model-name">{entry.Model}</td>
              <td class="success-rate">
                <div class="progress-bar">
                  <div
                    class={`progress-fill ${
                      entry.Success_Rate >= 30
                        ? 'progress-fill--high'
                        : entry.Success_Rate >= 15
                          ? 'progress-fill--medium'
                          : 'progress-fill--low'
                    }`}
                    style={`width: ${entry.Success_Rate}%; background-color: ${entry.Success_Rate >= 30 ? 'var(--progress-high)' : entry.Success_Rate >= 15 ? 'var(--progress-medium)' : 'var(--progress-low)'};`}
                  />
                  <span
                    class="progress-text"
                    style="color: var(--progress-text-color); text-shadow: var(--progress-text-shadow);"
                  >
                    {entry.Success_Rate.toFixed(1)}%
                  </span>
                </div>
              </td>
              <td class="cost">
                <div class="progress-bar">
                  <div
                    class="progress-fill progress-fill--cost"
                    style={`width: ${costRange > 0 ? ((entry.Avg_Cost || calculateCost(entry.Avg_Tokens)) / maxCost) * 100 : 0}%; background-color: #9ca3af;`}
                  />
                  <span
                    class="progress-text"
                    style="color: var(--progress-text-color); text-shadow: var(--progress-text-shadow);"
                  >
                    ${(entry.Avg_Cost || calculateCost(entry.Avg_Tokens)).toFixed(4)}
                  </span>
                </div>
              </td>
              <td class="cost">
                {entry.Price_per_Success != null ? `$${entry.Price_per_Success.toFixed(4)}` : 'N/A'}
              </td>
              <td class="duration">{entry.Avg_Duration.toFixed(2)}s</td>
              <td class="tokens">{entry.Avg_Tokens.toLocaleString()}</td>
              <td class="runs">{entry.Runs}</td>
              <td class="provider">{entry.Provider}</td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</section>

<style>
  /* Leaderboard Styles */
  .leaderboard-section {
    background: var(--bg-secondary);
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .leaderboard-section h2 {
    margin-top: -1rem;
    margin-bottom: 0.5rem;
  }

  .leaderboard-table {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    position: relative;
    width: 100%;
    max-width: 100%;
  }

  /* Mobile scroll indicator */
  @media (max-width: 768px) {
    .leaderboard-table {
      margin: 0 0rem;
      padding: 0 0.5rem;
      scrollbar-width: thin;
      scrollbar-color: var(--accent-primary) var(--bg-tertiary);
    }

    .leaderboard-table::-webkit-scrollbar {
      height: 6px;
    }

    .leaderboard-table::-webkit-scrollbar-track {
      background: var(--bg-tertiary);
    }

    .leaderboard-table::-webkit-scrollbar-thumb {
      background: var(--accent-primary);
      border-radius: 3px;
    }

    /* Visual scroll hint */
    .leaderboard-table::after {
      content: '\2192';
      position: absolute;
      top: 50%;
      right: 10px;
      transform: translateY(-50%);
      font-size: 1.5rem;
      color: var(--accent-primary);
      opacity: 0.5;
      pointer-events: none;
      animation: scrollHint 2s ease-in-out infinite;
    }

    @keyframes scrollHint {
      0%,
      100% {
        transform: translateY(-50%) translateX(0);
      }
      50% {
        transform: translateY(-50%) translateX(5px);
      }
    }
  }

  table {
    width: 100%;
    border-collapse: collapse;
    min-width: 600px; /* Ensure minimum width for readability */
  }

  /* Allow table to expand on larger viewports */
  @media (min-width: 1440px) {
    table {
      min-width: auto;
    }
  }

  @media (max-width: 768px) {
    table {
      font-size: 0.875rem;
    }
  }

  th,
  td {
    text-align: left;
    padding: 0.75rem;
    border-bottom: 1px solid var(--border-color);
  }

  th {
    background-color: var(--bg-primary);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    position: relative; /* Needed for tooltip positioning */
  }

  /* Sortable header styles */
  .sortable {
    cursor: pointer;
    user-select: none;
    position: relative;
    transition: background-color 0.2s ease;
  }

  .sortable:hover {
    background-color: var(--bg-tertiary);
    color: var(--text-primary);
  }

  .sortable.active {
    /* No special styling - only the arrow indicator shows active state */
  }

  .sort-indicator {
    font-size: 0.8rem;
    opacity: 0.5;
    margin-left: 0.25rem;
  }

  .sortable.active .sort-indicator {
    opacity: 1;
    color: var(--accent-primary);
  }

  .sortable:not(.active) .sort-indicator {
    opacity: 0;
  }

  .sortable:hover:not(.active) .sort-indicator {
    opacity: 0.3;
  }

  tbody tr:hover {
    background-color: var(--bg-primary);
  }

  .rank {
    font-weight: bold;
    color: var(--text-secondary);
  }

  .model-name {
    font-weight: 500;
    color: var(--text-primary);
  }

  /* Desktop optimizations for better data presentation */
  @media (min-width: 1025px) {
    table {
      font-size: 1rem;
    }

    th,
    td {
      padding: 0.75rem 0.5rem;
    }

    .model-name {
      min-width: 180px;
    }

    .progress-bar {
      min-width: 140px;
    }
  }

  /* Wider viewports - remove constraints to use available space */
  @media (min-width: 1440px) {
    th,
    td {
      padding: 0.875rem 0.75rem;
    }

    .model-name {
      min-width: auto;
      white-space: nowrap;
    }

    .progress-bar {
      min-width: auto;
      width: 100%;
    }
  }

  .progress-bar {
    position: relative;
    background-color: var(--bg-tertiary);
    height: 24px;
    border-radius: 12px;
    overflow: hidden;
    min-width: 150px;
  }

  .progress-fill {
    height: 100%;
    transition: width 0.3s ease;
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--progress-text-color);
    text-shadow: var(--progress-text-shadow);
  }

  .cost {
    color: var(--accent-secondary);
    font-weight: 500;
  }

  .duration {
    color: var(--duration-color);
  }

  .tokens {
    color: var(--tokens-color);
  }

  .progress-fill--high {
    background-color: var(--progress-high);
  }

  .progress-fill--medium {
    background-color: var(--progress-medium);
  }

  .progress-fill--low {
    background-color: var(--progress-low);
  }

  /* Cost progress bar - single muted color */
  .progress-fill--cost {
    background-color: #9ca3af; /* Muted gray for all cost bars */
  }

  @media (max-width: 768px) {
    .leaderboard-section {
      padding: 0.5rem;
      margin-left: 0;
      margin-right: 0;
      border-radius: 0;
    }

    th,
    td {
      padding: 0.5rem;
      font-size: 0.85rem;
    }

    .progress-bar {
      min-width: 100px;
    }

    /* Hide less important columns on mobile */
    th:nth-child(5), /* Duration */
    td:nth-child(5),
    th:nth-child(6), /* Tokens */
    td:nth-child(6),
    th:nth-child(7), /* Runs */
    td:nth-child(7) {
      display: none;
    }

    /* Optimize remaining columns */
    th:nth-child(4), /* Cost */
    td:nth-child(4) {
      min-width: 80px;
    }

    .progress-bar {
      min-width: 80px;
      height: 20px;
    }

    .progress-text {
      font-size: 0.7rem;
    }
  }
</style>
